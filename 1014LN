When You Must Use wire:

Tristate (Bidirectional) Buses:

If you're modeling tristate buses (i.e., bidirectional signals or open-drain behavior), you need to use wire. A logic signal cannot have multiple drivers, but a wire can handle this because it allows for high-impedance (Z) states.
Example:
wire bus;
assign bus = (enable) ? data : 1'bz; // Tristate bus
Multiple Drivers:

If a signal has multiple drivers, you must use wire. For example, if multiple modules or assign statements are driving the same signal, wire must be used because it allows for continuous assignments from different drivers.
Example:
wire result;
assign result = cond1 ? signal1 : 1'bz; // Multiple drivers
assign result = cond2 ? signal2 : 1'bz;

Best Practices:

Use logic when:
You are working with procedural blocks like always, initial, or always_ff, where you may assign values within the block.
You want to avoid the confusion between reg and wire in traditional Verilog, as logic can replace both.
You are writing code that doesn’t involve tristate buses or multiple drivers.

Use wire when:
You are connecting module inputs/outputs that might have multiple drivers or tristate buses.
You are writing purely combinational logic using continuous assignments (i.e., assign statements) and don’t plan to use the signal in procedural code.
